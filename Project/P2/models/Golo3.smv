--------------------------------------------------------------------------
-- Hourglass module ------------------------------------------------------
--
-- Representation of a parametrized hourglass.
--
-- The "expired" variable becomes 1 when the hourglass is going to expire
-- on the next state.
--
-- The hourglass is automatically restarted when this happens, and the
-- "reset" variable can be used to force restarting.
--------------------------------------------------------------------------


MODULE Hourglass (n)

VAR
    time : 0 .. 16;
    reset : boolean;

ASSIGN
    init(time) := 0;
    next(time) :=
        case
            reset = 1  : 0;
            1          : (time + 1) mod n;
        esac;

DEFINE
    expired := ( time + 1 = n );

--------------------------------------------------------------------------
-- Golo's dinner problem -------------------------------------------------
--
-- This version is pretty much like the previous one, but cooking must be
-- achieved at once (the previous version showed as valid an execution
-- in which the cooking phase gets interrupted and restarted).
--------------------------------------------------------------------------

MODULE main

VAR
    h7 : Hourglass(7);
    h11 : Hourglass(11);

    egg : 0 .. 25;
    cooking : boolean;

ASSIGN

    init(egg) := 0;
    next(egg) :=
        case
            -- Here the only significative change with respect to previous
            -- model: if the cooking phase is interrupted before the egg
            -- is cooked, then the counter is reset. This forces the
            -- system to do the cooking phase at-once.
            cooking = 1 & egg_overcooked     : egg;
            cooking = 1 & egg < 25           : egg + 1;
            cooking = 0 & egg_ready          : egg;
            1                                : 0;
        esac;

    init(cooking) := {0, 1};
    next(cooking) :=
        case
            event : { 0, 1 };
            1     : cooking;
        esac;

    init(h7.reset) := 0;
    next(h7.reset) :=
        case
            egg >= 25 : 0;
            event     : { 0, 1 };
            1         : h7.reset;
        esac;

    init(h11.reset) := 0;
    next(h11.reset) :=
        case
            egg >= 25 : 0;
            event     : { 0, 1 };
            1         : h11.reset;
        esac;

DEFINE
    event := ( h7.expired | h11.expired );

    egg_ready := ( egg = 24 );
    egg_overcooked := ( egg = 25 );

--------------------------------------------------------------------------
-- Reachability of the solution ------------------------------------------

SPEC EF AG egg_ready;

--------------------------------------------------------------------------

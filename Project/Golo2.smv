--------------------------------------------------------------------------
-- Hourglass module ------------------------------------------------------
--
-- Representation of a parametrized hourglass.
--
-- The "expired" variable becomes 1 when the hourglass is going to expire
-- on the next state.
--
-- The hourglass is automatically restarted when this happens, and the
-- "reset" variable can be used to force restarting.
--------------------------------------------------------------------------


MODULE Hourglass (n)

VAR
    time : 0 .. 16;
    reset : boolean;

ASSIGN
    init(time) := 0;
    next(time) :=
        case
            reset = 1  : 0;
            1          : (time + 1) mod n;
        esac;

DEFINE
    expired := (time + 1 = n);

--------------------------------------------------------------------------
-- Golo's dinner problem -------------------------------------------------
--
-- This mode lets the system find an appropriate path leading to a cooking
-- time of 24 seconds.
--
-- The system non-deterministically decides which event to associate to
-- the "start cooking" action, then the following events are checked until
-- 24 is reached or overtaken.
--------------------------------------------------------------------------

MODULE main

VAR
    h7 : Hourglass(7);
    h11 : Hourglass(11);

    egg : 0 .. 25;
    cooking : boolean;

ASSIGN

    init(egg) := 0;
    next(egg) :=
        case
            !cooking | egg_overcooked : egg;
            cooking & egg < 25        : egg + 1;
        esac;

    init(cooking) := {0, 1};
    next(cooking) :=
        case
            event : { 0, 1 };
            1     : cooking;
        esac;
    
    init(h7.reset) := 0;
    next(h7.reset) :=
        case
            egg >= 25 : 0;
            event     : { 0, 1 };
            1         : h7.reset;
        esac;

    init(h11.reset) := 0;
    next(h11.reset) :=
        case
            egg >= 25 : 0;
            event     : { 0, 1 };
            1         : h11.reset;
        esac;

DEFINE
    event := ( h7.expired | h11.expired );

    egg_ready := ( egg = 24 );
    egg_overcooked := ( egg = 25 );

    stop := event & egg_ready;

--------------------------------------------------------------------------
-- Reachability of the solution ------------------------------------------

SPEC EF AG egg_ready;

